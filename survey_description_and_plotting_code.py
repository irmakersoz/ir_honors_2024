# -*- coding: utf-8 -*-
"""Survey Description and Plotting Code

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18_vYZAY5wEAIY9SDY0coomPO2BOI6fay

# TEST FOR ONE PROJECT WITH WGI
"""

import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
import os
from google.colab import files
import numpy as np

# Make directory for plots
plots_final = 'plots_final'
os.makedirs(plots_final, exist_ok=True)

# Load dataframe
df = pd.read_csv("survey_final!.csv")

df.columns

# Rename columns for plotting
cpia_columns = {
    'cpia_build_hr_score': 'CPIA Building Human Resources Score',
    'cpia_bus_reg_env_score': 'CPIA Business Regulatory Environment Score',
    'cpia_debt_pol_score': 'CPIA Debt Policy and Management Score',
    'cpia_revmob_eff_score': 'CPIA Efficiency of Revenue Mobilization Score',
    'cpia_gend_eq_score': 'CPIA Gender Equality Score',
    'cpia_econmgt_clust_score': 'CPIA Economic Management Cluster Score',
    'cpia_publres_eqty_score': 'CPIA Equity of Public Resource Use Score',
    'cpia_fin_sector_score': 'CPIA Financial Sector Score',
    'cpia_fisc_pol_score': 'CPIA Fiscal Policy Score',
    'cpia_macecon_mgt_score': 'CPIA Macroeconomic Management Score',
    'cpia_social_policy_eqty_score': 'CPIA Social Inclusion & Equity Cluster Score',
    'cpia_env_policy_score': 'CPIA Policy and Institutions for Environmental Sustainability Score',
    'cpia_prop_rbg_score': 'CPIA Property Rights and Rule-Based Governance Score',
    'cpia_public_admin_score': 'CPIA Quality of Public Administration Score',
    'cpia_finmgt_qual_score': 'CPIA Quality of Budgetary and Financial Management Score',
    'cpia_social_prot_score': 'CPIA Social Protection Score',
    'cpia_struc_pol_score': 'CPIA Structural Policies Cluster Score',
    'cpia_trade_score': 'CPIA Trade Score',
    'cpia_publ_corr_score': 'CPIA Public Sector Transparency, Accountability and Corruption Score',
    'cpia_ida_res_score': 'CPIA IDA Resource Allocation Index',
    "cpia_publ_sct_mgt_score" : "CPIA Public Sector Management Cluster Score"
}

wgi_columns = {
    'wgi_voiceacct_score': 'WGI Voice and Accountability Score',
    'wgi_polstability_score': 'WGI Political Stability Score',
    'wgi_goveff_score': 'WGI Government Effectiveness Score',
    'wgi_regquality_score': 'WGI Regulatory Quality Score',
    'wgi_ruleoflaw_score': 'WGI Rule of Law Score',
    'wgi_corruption_score': 'WGI Corruption Score'
}

# Combine the dictionaries
rename_dict = {**cpia_columns, **wgi_columns}

# Rename the columns in the DataFrame
df.rename(columns=rename_dict, inplace=True)

# Check the new column names to ensure the change has been made
print(df.columns)

selected_values = df.iloc[1, 12:18]
index_value = df.at[1, 'RowIndex']

# Create a horizontal bar plot
plt.figure(figsize=(10, 6))
bars = plt.barh(selected_values.index, selected_values.values, color='darkcyan')

# Add a vertical line at zero
plt.axvline(0, color='gray', linewidth=1)

# Set x-axis limits
plt.xlim(-2.5, 2.5)

# Label each bar with its value, shifted outside the bar
for bar in bars:
    label_x_pos = bar.get_width() + (0.05 if bar.get_width() > 0 else -0.05)
    plt.text(label_x_pos, bar.get_y() + bar.get_height()/2, '{0:.2f}'.format(bar.get_width()),
             va='center', ha='right' if bar.get_width() < 0 else 'left', color='black', fontweight='bold')

# Add labels and title using the "Index" column value
plt.xlabel('Values')
plt.ylabel('Columns')
plt.title(f'Governance Measures for Project ({index_value})')

# Show the plot
plt.show()

# Save the plot to a file using the Index value in the filename
plot_filename = f'plots/WGI_{index_value}.png'
plt.savefig(plot_filename)

# Output the path to the saved file
plot_filename

"""# TEST FOR ONE PROJECT WITH CPIA"""

selected_values = df.iloc[1, 18:39]

# Create a horizontal bar plot
plt.figure(figsize=(10, 6))
bars = plt.barh(selected_values.index, selected_values.values, color='darkcyan')

# Add a vertical line at zero
plt.axvline(0, color='gray', linewidth=1)

# Set x-axis limits
plt.xlim(1, 6)

# Label each bar with its value, shifted outside the bar
for bar in bars:
    label_x_pos = bar.get_width() + (0.05 if bar.get_width() > 0 else -0.05)
    plt.text(label_x_pos, bar.get_y() + bar.get_height()/2, '{0:.2f}'.format(bar.get_width()),
             va='center', ha='right' if bar.get_width() < 0 else 'left', color='black', fontweight='bold')

# Add labels and title using the "Index" column value
plt.xlabel('Values')
plt.ylabel('Columns')
plt.title(f'Governance Measures for Project ({index_value})')

# Show the plot
plt.show()

# Save the plot to a file using the Index value in the filename
plot_filename = f'plots/CPIA_{index_value}.png'
plt.savefig(plot_filename)

"""# TEST FOR MULTIPLE PROJECTS"""

# Subset survey data into 3 groups of equal sizes
# Calculate the sizes for three equal parts
total_size = len(df)
subset_size = total_size // 3  # Integer division to get the base size of each subset
remainder = total_size % 3  # Get the remainder if the total size is not divisible by 3

# Splitting the data into three parts
# First split: one third (or one third + 1 if remainder is not zero)
subset1, temp_df = train_test_split(df, test_size=2*subset_size + (2 if remainder > 0 else 0), stratify=df['bi_overall_rating'], random_state=42)

# Second split: one half of the remaining data (accounting for remainder)
subset2, subset3 = train_test_split(temp_df, test_size=subset_size + (1 if remainder == 2 else 0), stratify=temp_df['bi_overall_rating'], random_state=42)

# Verify the sizes and distributions
print("Sizes:", len(subset1), len(subset2), len(subset3))
print("Subset 1 distribution:\n", subset1['bi_overall_rating'].value_counts(normalize=True))
print("Subset 2 distribution:\n", subset2['bi_overall_rating'].value_counts(normalize=True))
print("Subset 3 distribution:\n", subset3['bi_overall_rating'].value_counts(normalize=True))

# Verify the sizes
print("Sizes:", len(subset1), len(subset2), len(subset3))

subset1.to_csv("only.csv")
subset2.to_csv("wgi.csv")
subset3.to_csv("cpia.csv")

# Define functions separately for WGI and CPIA
def make_wgi_plots(df):
  for i in range(len(df)):
    project = df.iloc[i, 12:18]
    id = df.iloc[i-1]['project_id']
    plt.figure(figsize=(10, 6))
    bars = plt.barh(project.index, project.values, color='darkcyan')

    # Add a vertical line at zer0
    plt.axvline(0, color='gray', linewidth=1)

    # Set x-axis limits
    plt.xlim(-2.5, 2.5)

    # Label each bar with its value, shifted outside the bar
    for bar in bars:
      label_x_pos = bar.get_width() + (0.05 if bar.get_width() > 0 else -0.05)
      plt.text(label_x_pos, bar.get_y() + bar.get_height()/2, '{0:.2f}'.format(bar.get_width()),
               va='center', ha='right' if bar.get_width() < 0 else 'left', color='black', fontweight='bold')
    # Add labels and title using the "Index" column value
    plt.xlabel('Values')
    plt.ylabel('Columns')
    plt.title(f'Governance Measures for Project ({id})')
    plt.tight_layout()

    # Save plot to directory and close plot
    plot_filename = f'plots_final/WGI_{id}.png'
    plt.savefig(plot_filename, bbox_inches='tight')
    plt.close()

def make_cpia_plots(df):
  for i in range(len(df)):
    project = df.iloc[i, 18:39]
    id = df.iloc[i-1]['project_id']
    plt.figure(figsize=(10, 6))
    colors = ['red' if x < 0 else 'green' for x in project.values]
    bars = plt.barh(project.index, project.values, color='darkcyan')

    # Set x-axis limits
    plt.xlim(1, 6)

    # Label each bar with its value, shifted outside the bar
    for bar in bars:
      label_x_pos = bar.get_width() + (0.05 if bar.get_width() > 0 else -0.05)
      plt.text(label_x_pos, bar.get_y() + bar.get_height()/2, '{0:.2f}'.format(bar.get_width()),
               va='center', ha='right' if bar.get_width() < 0 else 'left', color='black', fontweight='bold')
    # Add labels and title using the "Index" column value
    plt.xlabel('Values')
    plt.ylabel('Columns')
    plt.title(f'Governance Measures for Project ({id})')
    plt.tight_layout()

    # Save plot to directory and close plot
    plot_filename = f'plots_final/CPIA_{id}.png'
    plt.savefig(plot_filename, bbox_inches='tight')
    plt.close()

make_wgi_plots(subset2)

make_cpia_plots(subset3)

!zip -r plots.zip plots

files.download("plots.zip")

"""# With new subsets"""

# Stratified Sampling
# Correcting the stratified sampling code
sample_size = 50
def stratified_sample(df, group_column, k=50):
    n = max(1, int(np.rint(k * len(df) / len(df))))
    return df.groupby(group_column, group_keys=False).apply(lambda x: x.sample(min(len(x), n), random_state=1)).reset_index(drop=True)

# Perform stratified sampling
sampled_df = stratified_sample(df, 'bi_overall_rating', sample_size)

# Function to convert days to 'years, months'
def days_to_years_months(days):
    years = days // 365
    months = (days % 365) // 30  # Approximate each month as 30 days
    return f"{years} years, {months} months"

# Apply the conversion to the 'duration' column
sampled_df['project_duration'] = sampled_df['project_duration'].apply(days_to_years_months)

# Example output
print(sampled_df[['bi_overall_rating', 'project_duration']])

make_wgi_plots(sampled_df)

make_cpia_plots(sampled_df)

sampled_df.to_csv("sample.csv")

!zip -r plots_final.zip plots_final

files.download("plots_final.zip")

"""Create project descriptions"""

# Function to create paragraphs from data
def create_paragraphs(row):
    return f"""Project {row.name}
Region: {row['region']}
Country: {row['country_name']}
Start Year: {row['start_year']}
Planned Duration: {row['project_duration']}
Donor Organization: {row['donor']}
Donor Office Present at Project?: {row['office_presence']}
Sector: {row['sector']}
Purpose: {row['project_purpose']}
Funding Amount: ${(row['project_size_usd']):,.2f}

"""

# Apply the function to each row and join the paragraphs
paragraphs = sampled_df.apply(create_paragraphs, axis=1).str.cat()

# Optionally, save the paragraphs to a text file
with open('project_descriptions.txt', 'w') as f:
    f.write(paragraphs)

# Function to create paragraphs from data
def create_paragraphs(row):
    try:
        # Ensure the funding amount is a float for formatting
        funding_amount = float(row['project_size_usd'])
    except ValueError:
        # If conversion fails, use the original value
        funding_amount = row['project_size_usd']

    return f"""Project {row.name}
Region: {row['region']}
Country: {row['country_name']}
Start Year: {row['start_year']}
Planned Duration: {row['project_duration']}
Donor Organization: {row['donor']}
Donor Office Present at Project?: {row['office_presence']}
Sector: {row['sector']}
Purpose: {row['project_purpose']}
Funding Amount: ${funding_amount:,.2f}

"""

# Assuming 'sampled_df' is the DataFrame you are working with
# Apply the function to each row and join the paragraphs
try:
    paragraphs = sampled_df.apply(create_paragraphs, axis=1).str.cat()
except Exception as e:
    print(f"An error occurred: {e}")

# Optionally, save the paragraphs to a text file
with open('project_descriptions.txt', 'w') as f:
    f.write(paragraphs)

# Function to create paragraphs from data
def create_paragraphs(row):
    try:
        # Ensure the funding amount is a float for formatting
        funding_amount = float(row['project_size_usd'])
        formatted_amount = f"${funding_amount:,.2f}"
    except ValueError:
        # If conversion fails, use the original value as is
        formatted_amount = row['project_size_usd']

    return f"""Project {row["project_id"]}
Region: {row['region']}
Country: {row['country_name']}
Start Year: {row['start_year']}
Planned Duration: {row['project_duration']}
Donor Organization: {row['donor']}
Donor Office Present at Project?: {row['office_presence']}
Sector: {row['sector']}
Purpose: {row['project_purpose']}
Funding Amount: {formatted_amount}

"""

# Assuming 'sampled_df' is the DataFrame you are working with
try:
    paragraphs = sampled_df.apply(create_paragraphs, axis=1).str.cat()
    # Optionally, save the paragraphs to a text file
    with open('project_descriptions.txt', 'w') as f:
        f.write(paragraphs)
except Exception as e:
    print(f"An error occurred: {e}")

# Apply the function to each row and join the paragraphs
paragraphs = sampled_df.apply(create_paragraphs, axis=1).str.cat()

# Optionally, save the paragraphs to a text file
with open('project_descriptions.txt', 'w') as f:
    f.write(paragraphs)